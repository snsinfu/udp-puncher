package hkdf

import (
	"bytes"
	"crypto/sha256"
	"testing"
)

func TestNew_GeneratesCorrectPRK(t *testing.T) {
	secret := []byte{0xfa, 0x1d, 0xa5, 0x8e, 0xaa, 0x63, 0xb0, 0x8b}
	salt := []byte{0x30, 0x46, 0x48, 0xa7, 0xb4, 0x5a, 0x61, 0xa4}

	hk := New(sha256.New, secret, salt)
	expected := []byte{
		0x72, 0x2f, 0xc3, 0x1a, 0x60, 0x3c, 0x9a, 0x62,
		0x29, 0x44, 0xe0, 0x69, 0x26, 0x69, 0x86, 0x6b,
		0x11, 0xf7, 0xbb, 0xdc, 0xdd, 0x1b, 0x47, 0x6c,
		0x6b, 0x1c, 0x1d, 0x1e, 0xcc, 0xef, 0xa0, 0x49,
	}

	if !bytes.Equal(hk.key, expected) {
		t.Errorf("unexpected PRK: got %x, want %x", hk.key, expected)
	}
}

func TestNew_GeneratesCorrectPRKForEmptySalt(t *testing.T) {
	secret := []byte{0xfa, 0x1d, 0xa5, 0x8e, 0xaa, 0x63, 0xb0, 0x8b}

	hk := New(sha256.New, secret, nil)
	expected := []byte{
		0x4d, 0x85, 0x18, 0x1a, 0x24, 0xbc, 0x9d, 0x11,
		0xce, 0x63, 0x43, 0x43, 0x3c, 0xee, 0xb7, 0x19,
		0x10, 0xe1, 0x0e, 0x41, 0xfc, 0x2e, 0xf3, 0x41,
		0x3f, 0x0c, 0x64, 0xda, 0xaf, 0xed, 0xea, 0x1e,
	}

	if !bytes.Equal(hk.key, expected) {
		t.Errorf("unexpected PRK: got %x, want %x", hk.key, expected)
	}
}

func TestPRK_DeriveKey_GeneratesCorrectShortKey(t *testing.T) {
	secret := []byte{0x5e, 0x85, 0xee, 0xce, 0x15, 0x49, 0xe6, 0x7c}
	salt := []byte{0x33, 0xe7, 0x9b, 0xdc, 0xa2, 0x38, 0x56, 0x68}

	hk := New(sha256.New, secret, salt)

	key1 := hk.DeriveKey(10, []byte("some key 1"))
	expected1 := []byte{0xa6, 0x99, 0xfe, 0x32, 0xa1, 0x1c, 0xba, 0xe4, 0x72, 0x24}

	if !bytes.Equal(key1, expected1) {
		t.Errorf("unexpected result: got %x, want %x", key1, expected1)
	}

	key2 := hk.DeriveKey(10, []byte("some key 2"))
	expected2 := []byte{0x73, 0xcd, 0x4c, 0xcb, 0xb0, 0xd9, 0x58, 0x0a, 0xa6, 0xde}

	if !bytes.Equal(key2, expected2) {
		t.Errorf("unexpected result: got %x, want %x", key2, expected2)
	}
}

func TestPRK_DeriveKey_GeneratesCorrectLongKey(t *testing.T) {
	secret := []byte{0xfa, 0x1d, 0xa5, 0x8e, 0xaa, 0x63, 0xb0, 0x8b}
	salt := []byte{0x30, 0x46, 0x48, 0xa7, 0xb4, 0x5a, 0x61, 0xa4}

	hk := New(sha256.New, secret, salt)
	expected := []byte{
		0xec, 0x38, 0xf1, 0xe2, 0x27, 0xbe, 0xc4, 0x5a,
		0x52, 0x4d, 0x46, 0x7d, 0x7c, 0xc9, 0xca, 0x0f,
		0x19, 0xbc, 0x7e, 0xb6, 0xde, 0xe7, 0x7e, 0x50,
		0x01, 0xb6, 0xf1, 0xe8, 0x84, 0xb5, 0x13, 0xbe,
		0x23, 0x67, 0xc6, 0x2a, 0x7c, 0x3f, 0x1d, 0xe3,
		0xd7, 0x1c, 0xe9, 0x07, 0x52, 0x07, 0x99, 0xba,
		0x68, 0x26, 0x56, 0x3d, 0x16, 0x0b, 0x2c, 0xce,
		0x29, 0xb6, 0x05, 0xc8, 0xe2, 0xe5, 0x00, 0xc6,
		0x0c, 0xe8, 0xbd, 0xb3, 0xcc, 0xfd, 0xf8, 0xd9,
		0xa0, 0xdb, 0x73, 0xe4, 0x10, 0x4b, 0xe5, 0xd6,
	}

	key := hk.DeriveKey(80, []byte("some long key"))
	if !bytes.Equal(key, expected) {
		t.Errorf("unexpected result: got %x, want %x", key, expected)
	}
}

func TestPRK_DeriveKey_GeneratesCorrectKeyForEmptyInfo(t *testing.T) {
	secret := []byte{0x94, 0x98, 0x86, 0x54, 0x4b, 0xd8, 0x0c, 0x72}
	salt := []byte{0xb1, 0x1c, 0x3c, 0xe4, 0x44, 0x99, 0x06, 0x88}

	hk := New(sha256.New, secret, salt)
	expected := []byte{
		0x0c, 0xa0, 0xcd, 0x3e, 0xd9, 0x5b, 0x7f, 0x78,
		0x68, 0x80, 0x66, 0xf1, 0x61, 0x4f, 0xe7, 0xf6,
		0xd3, 0x86, 0xad, 0x9e, 0xff, 0xfb, 0xe3, 0xc3,
		0x6e, 0x8d, 0xb1, 0x03, 0x4f, 0x18, 0x65, 0xf3,
		0x21, 0x6c, 0x86, 0xfa, 0x1a, 0x78, 0xc7, 0x22,
	}

	key := hk.DeriveKey(40, nil)
	if !bytes.Equal(key, expected) {
		t.Errorf("unexpected result: got %x, want %x", key, expected)
	}
}

func TestPRK_DeriveKey_PanicsOnLargeKeyRequest(t *testing.T) {
	defer func() {
		if r := recover(); r == nil {
			t.Errorf("unexpected success")
		}
	}()

	hk := New(sha256.New, []byte{0x7a, 0x25, 0x80, 0xad, 0x00, 0x5f, 0xd8, 0x5a}, nil)
	hk.DeriveKey(8161, nil)
}

func TestPRK_DeriveKey_DoesNotPanicOnMaxKeyRequest(t *testing.T) {
	hk := New(sha256.New, []byte{0x7a, 0x25, 0x80, 0xad, 0x00, 0x5f, 0xd8, 0x5a}, nil)
	hk.DeriveKey(8160, nil)
}

func Test_roundUp(t *testing.T) {
	testCases := []struct {
		n, m     int
		expected int
	}{
		{n: 0, m: 3, expected: 0},
		{n: 1, m: 3, expected: 3},
		{n: 2, m: 3, expected: 3},
		{n: 3, m: 3, expected: 3},
		{n: 4, m: 3, expected: 6},
		{n: 5, m: 3, expected: 6},
		{n: 6, m: 3, expected: 6},
	}
	for _, testCase := range testCases {
		actual := roundUp(testCase.n, testCase.m)
		if actual != testCase.expected {
			t.Errorf("unexpected result: got %d, want %d", actual, testCase.expected)
		}
	}
}
